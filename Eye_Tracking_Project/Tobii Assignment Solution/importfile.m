function eyetrackingdata = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   EYETRACKINGDATA = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   EYETRACKINGDATA = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   eyetrackingdata = importfile('eyetracking_data.tsv', 2, 13975);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/02/24 00:02:10

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Format string for each line of text:
%   column1: text (%s)
%	column2: text (%s)
%   column3: double (%f)
%	column4: text (%s)
%   column5: double (%f)
%	column6: double (%f)
%   column7: text (%s)
%	column8: text (%s)
%   column9: double (%f)
%	column10: text (%s)
%   column11: text (%s)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: text (%s)
%   column23: text (%s)
%	column24: text (%s)
%   column25: text (%s)
%	column26: text (%s)
%   column27: text (%s)
%	column28: text (%s)
%   column29: text (%s)
%	column30: text (%s)
%   column31: text (%s)
%	column32: double (%f)
%   column33: double (%f)
%	column34: double (%f)
%   column35: double (%f)
%	column36: double (%f)
%   column37: double (%f)
%	column38: double (%f)
%   column39: double (%f)
%	column40: double (%f)
%   column41: text (%s)
%	column42: text (%s)
%   column43: text (%s)
%	column44: text (%s)
%   column45: text (%s)
%	column46: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%f%s%f%f%s%s%f%s%s%f%f%f%f%f%f%f%f%f%f%s%s%s%s%s%s%s%s%s%s%f%f%f%f%f%f%f%f%f%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,0.0,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,0.0,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
eyetrackingdata = table(dataArray{1:end-1}, 'VariableNames', {'StudioTestName','ParticipantName','RecordingTimestamp','LocalTimeStamp','EyeTrackerTimestamp','FixationIndex','SaccadeIndex','GazeEventType','GazeEventDuration','FixationPointXMCSpx','FixationPointYMCSpx','AOICartHit','AOILoginHit','AOIPaymentsHit','AOIProduct_descriptionHit','AOIBasketHit','AOIProduct_summaryHit','AOIProduct_picHit','AOIMenuHit','AOILogoHit','AOIFullPageHit','AOICartHit1','AOILoginHit1','AOIPaymentsHit1','AOIProduct_descriptionHit1','AOIBasketHit1','AOIProduct_summaryHit1','AOIProduct_picHit1','AOIMenuHit1','AOILogoHit1','AOIFullPageHit1','GazePointIndex','GazePointLeftXADCSpx','GazePointLeftYADCSpx','GazePointRightXADCSpx','GazePointRightYADCSpx','GazePointXADCSpx','GazePointYADCSpx','GazePointXMCSpx','GazePointYMCSpx','GazePointLeftXADCSmm','GazePointLeftYADCSmm','GazePointRightXADCSmm','GazePointRightYADCSmm','StrictAverageGazePointXADCSmm','StrictAverageGazePointYADCSmm'});

