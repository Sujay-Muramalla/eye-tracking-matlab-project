#ifndef PLOTFRAME_H
#define PLOTFRAME_H

#include <QFrame>
#include <vector>
#include <tobii/sdk/cpp/EyeTracker.hpp>

namespace tetio = tobii::sdk::cpp;

namespace Ui {
//This class will be generated by Qt
class PlotFrame;
}

static double DBL_ROUND_ERROR = 1.0E-5;

struct point_2d_ex {
    tetio::Point2d point_;

    point_2d_ex(tetio::Point2d point) :
        point_(point)
    { }

    bool operator == (const point_2d_ex &pex) const
    {
        return (abs(point_.x - pex.point_.x) < DBL_ROUND_ERROR && abs(point_.y - pex.point_.y) < DBL_ROUND_ERROR);
    }
};

//Custom widget for displaying calibration result data. 
class PlotFrame : public QFrame
{
    Q_OBJECT
    
public:
    explicit PlotFrame(QWidget *parent = 0);
    
    enum EyeOption {
        Left = 1,
        Right = 2
    };

	void setPlotData(tetio::Calibration::pointer_t calibrationData, EyeOption eyeOption);

private:
    void paintEvent(QPaintEvent *event);
    void extractCalibrationPoints();
    QRect getCalibrationCircleBounds(tetio::Point2d center,int radius);
    QRect getCanvasBounds();
    QPoint pixelPointFromNormalizedPoint(tetio::Point2d normalizedPoint);

private:
    const float m_paddingRatio;
    const int m_circleRadius;

    EyeOption m_eyeOption;
    tetio::Calibration::plot_data_vector_t m_calibrationPlotData;
    std::vector<point_2d_ex> m_calibrationPoints;
};

#endif // PLOTFRAME_H
